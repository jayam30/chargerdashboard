"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/done/page",{

/***/ "(app-pages-browser)/./hooks/useBMSData.ts":
/*!*****************************!*\
  !*** ./hooks/useBMSData.ts ***!
  \*****************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useBMSData: () => (/* binding */ useBMSData)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _contexts_WebSocketContext__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../contexts/WebSocketContext */ \"(app-pages-browser)/./contexts/WebSocketContext.tsx\");\n/* harmony import */ var sonner__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! sonner */ \"(app-pages-browser)/./node_modules/sonner/dist/index.mjs\");\n// \"use client\";\n// import { useState, useEffect, useCallback } from 'react';\n// import { useWebSocket } from '../contexts/WebSocketContext';\n// import { toast } from 'sonner';\n// interface BMSData {\n//   voltage: number;\n//   current: number;\n//   SOC: number;\n//   isReceiverCoilDetected: boolean;\n// }\n// export function useBMSData() {\n//   const { sendMessage, lastMessage, connected, bmsData: contextBMSData } = useWebSocket();\n//   const [bmsData, setBMSData] = useState<BMSData>({\n//     voltage: 0,\n//     current: 0,\n//     SOC: 15,\n//     isReceiverCoilDetected: false,\n//   });\n//   // Update BMS data when receiving new messages\n//   useEffect(() => {\n//     if (lastMessage?.type === 'bms_data' && lastMessage.data) {\n//       setBMSData(lastMessage.data as BMSData);\n//     }\n//   }, [lastMessage]);\n//   // Sync with context BMS data\n//   useEffect(() => {\n//     setBMSData(contextBMSData);\n//   }, [contextBMSData]);\n//   // Update BMS data\n//   const updateBMSData = useCallback(async (newData: Partial<BMSData>): Promise<boolean> => {\n//     if (!connected) {\n//       toast.error('Not connected to charging system');\n//       return false;\n//     }\n//     try {\n//       const updatedData = {\n//         ...bmsData,\n//         ...newData,\n//       };\n//       sendMessage({\n//         type: 'updateBMSData',\n//         data: updatedData,\n//       });\n//       setBMSData(updatedData);\n//       return true;\n//     } catch (error) {\n//       console.error('Error updating BMS data:', error);\n//       toast.error('Failed to update BMS data');\n//       return false;\n//     }\n//   }, [connected, sendMessage, bmsData]);\n//   // Reset BMS data\n//   const resetBMSData = useCallback(() => {\n//     if (!connected) {\n//       toast.error('Not connected to charging system');\n//       return;\n//     }\n//     try {\n//       const resetData: BMSData = {\n//         voltage: 0,\n//         current: 0,\n//         SOC: 15,\n//         isReceiverCoilDetected: false,\n//       };\n//       sendMessage({\n//         type: 'resetBMSData',\n//         data: resetData,\n//       });\n//       setBMSData(resetData);\n//       toast.success('BMS data reset');\n//     } catch (error) {\n//       console.error('Error resetting BMS data:', error);\n//       toast.error('Failed to reset BMS data');\n//     }\n//   }, [connected, sendMessage]);\n//   // Monitor receiver coil detection\n//   useEffect(() => {\n//     if (bmsData.isReceiverCoilDetected) {\n//       toast.success('Receiver coil detected');\n//     } else if (bmsData.isReceiverCoilDetected === false) {\n//       toast.error('Receiver coil not detected');\n//     }\n//   }, [bmsData.isReceiverCoilDetected]);\n//   // Calculate charging power\n//   const calculateChargingPower = useCallback((): number => {\n//     return bmsData.voltage * bmsData.current;\n//   }, [bmsData.voltage, bmsData.current]);\n//   return {\n//     bmsData,\n//     updateBMSData,\n//     resetBMSData,\n//     isReceiverCoilDetected: bmsData.isReceiverCoilDetected,\n//     chargingPower: calculateChargingPower(),\n//   };\n// }\n////fod\n// \"use client\";\n// import { useState, useEffect, useCallback } from 'react';\n// import { useWebSocket } from '../contexts/WebSocketContext';\n// import { toast } from 'sonner';\n// interface BMSData {\n//   voltage: number;\n//   current: number;\n//   SOC: number;\n//   isReceiverCoilDetected: boolean;\n//   isFOD: boolean;\n//   isMiss: boolean;\n// }\n// export function useBMSData() {\n//   const { sendMessage, lastMessage, connected, bmsData: contextBMSData } = useWebSocket();\n//   const [bmsData, setBMSData] = useState<BMSData>({\n//     voltage: 0,\n//     current: 0,\n//     SOC: 15,\n//     isReceiverCoilDetected: false,\n//     isFOD: false,\n//     isMiss: false,\n//   });\n//   // Update BMS data when receiving new messages\n//   useEffect(() => {\n//     if (lastMessage?.type === 'bms_data' && lastMessage.data) {\n//       setBMSData(lastMessage.data as BMSData);\n//     }\n//   }, [lastMessage]);\n//   // Sync with context BMS data\n//   useEffect(() => {\n//     setBMSData(contextBMSData);\n//   }, [contextBMSData]);\n//   // Update BMS data\n//   const updateBMSData = useCallback(async (newData: Partial<BMSData>): Promise<boolean> => {\n//     if (!connected) {\n//       toast.error('Not connected to charging system');\n//       return false;\n//     }\n//     try {\n//       const updatedData = {\n//         ...bmsData,\n//         ...newData,\n//       };\n//       sendMessage({\n//         type: 'updateBMSData',\n//         data: updatedData,\n//       });\n//       setBMSData(updatedData);\n//       return true;\n//     } catch (error) {\n//       console.error('Error updating BMS data:', error);\n//       toast.error('Failed to update BMS data');\n//       return false;\n//     }\n//   }, [connected, sendMessage, bmsData]);\n//   // Reset BMS data\n//   const resetBMSData = useCallback(() => {\n//     if (!connected) {\n//       toast.error('Not connected to charging system');\n//       return;\n//     }\n//     try {\n//       const resetData: BMSData = {\n//         voltage: 0,\n//         current: 0,\n//         SOC: 15,\n//         isReceiverCoilDetected: false,\n//         isFOD: false,\n//         isMiss: false,\n//       };\n//       sendMessage({\n//         type: 'resetBMSData',\n//         data: resetData,\n//       });\n//       setBMSData(resetData);\n//       toast.success('BMS data reset');\n//     } catch (error) {\n//       console.error('Error resetting BMS data:', error);\n//       toast.error('Failed to reset BMS data');\n//     }\n//   }, [connected, sendMessage]);\n//   // Monitor receiver coil detection\n//   useEffect(() => {\n//     if (bmsData.isReceiverCoilDetected) {\n//       toast.success('Receiver coil detected');\n//     } else if (bmsData.isReceiverCoilDetected === false) {\n//       toast.error('Receiver coil not detected');\n//     }\n//   }, [bmsData.isReceiverCoilDetected]);\n//   // Calculate charging power\n//   const calculateChargingPower = useCallback((): number => {\n//     return bmsData.voltage * bmsData.current;\n//   }, [bmsData.voltage, bmsData.current]);\n//   return {\n//     bmsData,\n//     updateBMSData,\n//     resetBMSData,\n//     isReceiverCoilDetected: bmsData.isReceiverCoilDetected,\n//     isFOD: bmsData.isFOD,\n//     isMiss: bmsData.isMiss,\n//     chargingPower: calculateChargingPower(),\n//   };\n// }\n//miss alignment\n/* __next_internal_client_entry_do_not_use__ useBMSData auto */ \n\n\nfunction useBMSData() {\n    const { sendMessage, lastMessage, connected, bmsData: contextBMSData } = (0,_contexts_WebSocketContext__WEBPACK_IMPORTED_MODULE_1__.useWebSocket)();\n    const [bmsData, setBMSData] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({\n        voltage: 0,\n        current: 0,\n        SOC: 15,\n        isReceiverCoilDetected: false,\n        // targetSOC: 0,\n        isFOD: false,\n        isMiss: false\n    });\n    // Update BMS data when receiving new messages\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"useBMSData.useEffect\": ()=>{\n            if ((lastMessage === null || lastMessage === void 0 ? void 0 : lastMessage.type) === 'bms_data' && lastMessage.data) {\n                setBMSData(lastMessage.data);\n            }\n        }\n    }[\"useBMSData.useEffect\"], [\n        lastMessage\n    ]);\n    // Sync with context BMS data\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"useBMSData.useEffect\": ()=>{\n            setBMSData(contextBMSData);\n        }\n    }[\"useBMSData.useEffect\"], [\n        contextBMSData\n    ]);\n    // Update BMS data\n    const updateBMSData = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useBMSData.useCallback[updateBMSData]\": async (newData)=>{\n            if (!connected) {\n                sonner__WEBPACK_IMPORTED_MODULE_2__.toast.error('Not connected to charging system');\n                return false;\n            }\n            try {\n                const updatedData = {\n                    ...bmsData,\n                    ...newData\n                };\n                sendMessage({\n                    type: 'updateBMSData',\n                    data: updatedData\n                });\n                setBMSData(updatedData);\n                return true;\n            } catch (error) {\n                console.error('Error updating BMS data:', error);\n                sonner__WEBPACK_IMPORTED_MODULE_2__.toast.error('Failed to update BMS data');\n                return false;\n            }\n        }\n    }[\"useBMSData.useCallback[updateBMSData]\"], [\n        connected,\n        sendMessage,\n        bmsData\n    ]);\n    // Reset BMS data\n    const resetBMSData = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useBMSData.useCallback[resetBMSData]\": ()=>{\n            if (!connected) {\n                sonner__WEBPACK_IMPORTED_MODULE_2__.toast.error('Not connected to charging system');\n                return;\n            }\n            try {\n                const resetData = {\n                    voltage: 0,\n                    current: 0,\n                    SOC: 15,\n                    isReceiverCoilDetected: false,\n                    isFOD: false,\n                    // targetSOC: 0,\n                    isMiss: false\n                };\n                sendMessage({\n                    type: 'resetBMSData',\n                    data: resetData\n                });\n                setBMSData(resetData);\n                sonner__WEBPACK_IMPORTED_MODULE_2__.toast.success('BMS data reset');\n            } catch (error) {\n                console.error('Error resetting BMS data:', error);\n                sonner__WEBPACK_IMPORTED_MODULE_2__.toast.error('Failed to reset BMS data');\n            }\n        }\n    }[\"useBMSData.useCallback[resetBMSData]\"], [\n        connected,\n        sendMessage\n    ]);\n    // Monitor receiver coil detection\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"useBMSData.useEffect\": ()=>{\n            if (bmsData.isReceiverCoilDetected) {\n                sonner__WEBPACK_IMPORTED_MODULE_2__.toast.success('Receiver coil detected');\n            } else if (bmsData.isReceiverCoilDetected === false) {\n                sonner__WEBPACK_IMPORTED_MODULE_2__.toast.error('Receiver coil not detected');\n            }\n        }\n    }[\"useBMSData.useEffect\"], [\n        bmsData.isReceiverCoilDetected\n    ]);\n    // Calculate charging power\n    // const calculateChargingPower = useCallback((): number => {\n    //   return bmsData.voltage * bmsData.current;\n    // }, [bmsData.voltage, bmsData.current]);\n    const calculateChargingPower = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useBMSData.useCallback[calculateChargingPower]\": ()=>{\n            var _bmsData_voltage;\n            const voltage = (_bmsData_voltage = bmsData === null || bmsData === void 0 ? void 0 : bmsData.voltage) !== null && _bmsData_voltage !== void 0 ? _bmsData_voltage : 0;\n            var _bmsData_current;\n            const current = (_bmsData_current = bmsData === null || bmsData === void 0 ? void 0 : bmsData.current) !== null && _bmsData_current !== void 0 ? _bmsData_current : 0;\n            const powerW = voltage * current; // Power in Watts\n            const energyIncrement = powerW / 1000 / 3600; // kWh added every second\n            return Number(energyIncrement.toFixed(6)); // rounded to 6 decimal places\n        }\n    }[\"useBMSData.useCallback[calculateChargingPower]\"], [\n        bmsData === null || bmsData === void 0 ? void 0 : bmsData.voltage,\n        bmsData === null || bmsData === void 0 ? void 0 : bmsData.current\n    ]);\n    return {\n        bmsData,\n        updateBMSData,\n        resetBMSData,\n        isReceiverCoilDetected: bmsData.isReceiverCoilDetected,\n        isFOD: bmsData.isFOD,\n        isMiss: bmsData.isMiss,\n        chargingPower: calculateChargingPower()\n    };\n} // soc\n // \"use client\";\n // import { useState, useEffect, useCallback } from 'react';\n // import { useWebSocket } from '../contexts/WebSocketContext';\n // import { toast } from 'sonner';\n // interface BMSData {\n //   voltage: number;\n //   current: number;\n //   SOC: number;\n //   isReceiverCoilDetected: boolean;\n //   isFOD: boolean;\n //   isMiss: boolean;\n // }\n // export function useBMSData() {\n //   const { sendMessage, lastMessage, connected, bmsData: contextBMSData } = useWebSocket();\n //   const [bmsData, setBMSData] = useState<BMSData>({\n //     voltage: 0,\n //     current: 0,\n //     SOC: 15,\n //     isReceiverCoilDetected: false,\n //     isFOD: false,\n //     isMiss: false,\n //   });\n //   // Update BMS data when receiving new messages\n //   useEffect(() => {\n //     if (lastMessage?.type === 'bms_data' && lastMessage.data) {\n //       setBMSData(lastMessage.data as BMSData);\n //     }\n //   }, [lastMessage]);\n //   // Sync with context BMS data\n //   useEffect(() => {\n //     setBMSData(contextBMSData);\n //   }, [contextBMSData]);\n //   // Update BMS data\n //   const updateBMSData = useCallback(async (newData: Partial<BMSData>): Promise<boolean> => {\n //     if (!connected) {\n //       toast.error('Not connected to charging system');\n //       return false;\n //     }\n //     try {\n //       const updatedData = {\n //         ...bmsData,\n //         ...newData,\n //       };\n //       sendMessage({\n //         type: 'updateBMSData',\n //         data: updatedData,\n //       });\n //       setBMSData(updatedData);\n //       return true;\n //     } catch (error) {\n //       console.error('Error updating BMS data:', error);\n //       toast.error('Failed to update BMS data');\n //       return false;\n //     }\n //   }, [connected, sendMessage, bmsData]);\n //   // Reset BMS data\n //   const resetBMSData = useCallback(() => {\n //     if (!connected) {\n //       toast.error('Not connected to charging system');\n //       return;\n //     }\n //     try {\n //       const resetData: BMSData = {\n //         voltage: 0,\n //         current: 0,\n //         SOC: 15,\n //         isReceiverCoilDetected: false,\n //         isFOD: false,\n //         isMiss: false,\n //       };\n //       sendMessage({\n //         type: 'resetBMSData',\n //         data: resetData,\n //       });\n //       setBMSData(resetData);\n //       toast.success('BMS data reset');\n //     } catch (error) {\n //       console.error('Error resetting BMS data:', error);\n //       toast.error('Failed to reset BMS data');\n //     }\n //   }, [connected, sendMessage]);\n //   // Monitor receiver coil detection\n //   useEffect(() => {\n //     if (bmsData.isReceiverCoilDetected) {\n //       toast.success('Receiver coil detected');\n //     } else if (bmsData.isReceiverCoilDetected === false) {\n //       toast.error('Receiver coil not detected');\n //     }\n //   }, [bmsData.isReceiverCoilDetected]);\n //   // Calculate charging power\n //   const calculateChargingPower = useCallback((): number => {\n //     return bmsData.voltage * bmsData.current;\n //   }, [bmsData.voltage, bmsData.current]);\n //   return {\n //     bmsData,\n //     updateBMSData,\n //     resetBMSData,\n //     isReceiverCoilDetected: bmsData.isReceiverCoilDetected,\n //     isFOD: bmsData.isFOD,\n //     isMiss: bmsData.isMiss,\n //     chargingPower: calculateChargingPower(),\n //   };\n // }\n //soc\n // \"use client\";\n // import { useState, useEffect, useCallback } from 'react';\n // import { useWebSocket } from '../contexts/WebSocketContext';\n // import { toast } from 'sonner';\n // interface BMSData {\n //   voltage: number;\n //   current: number;\n //   SOC: number;\n //   targetSOC: number; // ✅ Added targetSOC\n //   isReceiverCoilDetected: boolean;\n //   isFOD: boolean;\n //   isMiss: boolean;\n // }\n // export function useBMSData() {\n //   const { sendMessage, lastMessage, connected, bmsData: contextBMSData } = useWebSocket();\n //   const [bmsData, setBMSData] = useState<BMSData>({\n //     voltage: 0,\n //     current: 0,\n //     SOC: 15,\n //     targetSOC: 100, // ✅ Default value\n //     isReceiverCoilDetected: false,\n //     isFOD: false,\n //     isMiss: false,\n //   });\n //   // Update BMS data when receiving new messages\n //   useEffect(() => {\n //     if (lastMessage?.type === 'bms_data' && lastMessage.data) {\n //       setBMSData(lastMessage.data as BMSData);\n //     }\n //   }, [lastMessage]);\n //   // Sync with context BMS data\n //   useEffect(() => {\n //     setBMSData(contextBMSData);\n //   }, [contextBMSData]);\n //   // Update BMS data (including targetSOC)\n //   const updateBMSData = useCallback(async (newData: Partial<BMSData>): Promise<boolean> => {\n //     if (!connected) {\n //       toast.error('Not connected to charging system');\n //       return false;\n //     }\n //     try {\n //       const updatedData = {\n //         ...bmsData,\n //         ...newData,\n //       };\n //       // Use a consistent message type for bms_data\n //       sendMessage({\n //         type: 'bms_data',\n //         data: updatedData,\n //       });\n //       setBMSData(updatedData);\n //       return true;\n //     } catch (error) {\n //       console.error('Error updating BMS data:', error);\n //       toast.error('Failed to update BMS data');\n //       return false;\n //     }\n //   }, [connected, sendMessage, bmsData]);\n //   // Reset BMS data\n //   const resetBMSData = useCallback(() => {\n //     if (!connected) {\n //       toast.error('Not connected to charging system');\n //       return;\n //     }\n //     try {\n //       const resetData: BMSData = {\n //         voltage: 0,\n //         current: 0,\n //         SOC: 15,\n //         targetSOC: 100,\n //         isReceiverCoilDetected: false,\n //         isFOD: false,\n //         isMiss: false,\n //       };\n //       sendMessage({\n //         type: 'bms_data',\n //         data: resetData,\n //       });\n //       setBMSData(resetData);\n //       toast.success('BMS data reset');\n //     } catch (error) {\n //       console.error('Error resetting BMS data:', error);\n //       toast.error('Failed to reset BMS data');\n //     }\n //   }, [connected, sendMessage]);\n //   // Monitor receiver coil detection\n //   useEffect(() => {\n //     if (bmsData.isReceiverCoilDetected) {\n //       toast.success('Receiver coil detected');\n //     } else if (bmsData.isReceiverCoilDetected === false) {\n //       toast.error('Receiver coil not detected');\n //     }\n //   }, [bmsData.isReceiverCoilDetected]);\n //   // Calculate charging power\n //   const calculateChargingPower = useCallback((): number => {\n //     return bmsData.voltage * bmsData.current;\n //   }, [bmsData.voltage, bmsData.current]);\n //   return {\n //     bmsData,\n //     updateBMSData,\n //     resetBMSData,\n //     isReceiverCoilDetected: bmsData.isReceiverCoilDetected,\n //     isFOD: bmsData.isFOD,\n //     isMiss: bmsData.isMiss,\n //     chargingPower: calculateChargingPower(),\n //   };\n // }\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./hooks/useBMSData.ts\n"));

/***/ })

});