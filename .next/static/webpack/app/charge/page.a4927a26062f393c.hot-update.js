"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/charge/page",{

/***/ "(app-pages-browser)/./hooks/useTimerStatus.ts":
/*!*********************************!*\
  !*** ./hooks/useTimerStatus.ts ***!
  \*********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useTimerStatus: () => (/* binding */ useTimerStatus)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_navigation__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/navigation */ \"(app-pages-browser)/./node_modules/next/dist/api/navigation.js\");\n/* harmony import */ var _useChargingStatus__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./useChargingStatus */ \"(app-pages-browser)/./hooks/useChargingStatus.ts\");\n/* harmony import */ var _useBMSData__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./useBMSData */ \"(app-pages-browser)/./hooks/useBMSData.ts\");\n// \"use client\";\n// import { useState, useEffect } from \"react\";\n// export function useTimerStatus() {\n//   const [endTime, setEndTime] = useState<number | null>(null);\n//   // Function to set the timer\n//   const setTimer = (durationMinutes: number) => {\n//     const currentTime = Date.now();\n//     const calculatedEndTime = currentTime + durationMinutes * 60 * 1000; // Convert minutes to milliseconds\n//     setEndTime(calculatedEndTime);\n//     localStorage.setItem(\"chargingEndTime\", calculatedEndTime.toString()); // Persist data\n//   };\n//   // Retrieve stored endTime on component mount\n//   useEffect(() => {\n//     const storedEndTime = localStorage.getItem(\"chargingEndTime\");\n//     if (storedEndTime) {\n//       setEndTime(Number(storedEndTime));\n//     }\n//   }, []);\n//   return {\n//     endTime,\n//     setTimer,\n//   };\n// }\n//pushing to done page\n// \"use client\";\n// import { useState, useEffect } from \"react\";\n// import { useRouter } from \"next/navigation\";\n// import { useChargingStatus } from \"./useChargingStatus\"; // ✅ Import charging status hook\n// export function useTimerStatus() {\n//   const [endTime, setEndTime] = useState<number | null>(null);\n//   const router = useRouter();\n//   const { isChargingInitialized } = useChargingStatus(); // ✅ Check if charging is active\n//   // Function to set the timer\n//   const setTimer = (durationMinutes: number) => {\n//     const currentTime = Date.now();\n//     const calculatedEndTime = currentTime + durationMinutes * 60 * 1000; // Convert minutes to milliseconds\n//     setEndTime(calculatedEndTime);\n//     localStorage.setItem(\"chargingEndTime\", calculatedEndTime.toString()); // Persist data\n//   };\n//   // Retrieve stored endTime on component mount\n//   useEffect(() => {\n//     const storedEndTime = localStorage.getItem(\"chargingEndTime\");\n//     if (storedEndTime) {\n//       setEndTime(Number(storedEndTime));\n//     }\n//   }, []);\n//   // ✅ Automatically redirect when timer reaches zero AND charging is active\n//   useEffect(() => {\n//     if (!endTime || !isChargingInitialized) return; // ✅ Prevent flicker issue\n//     const checkTime = () => {\n//       const now = Date.now();\n//       if (now >= endTime && isChargingInitialized) {\n//         console.log(\"⏰ Timer expired! Redirecting to /done...\");\n//         router.replace(\"/done\"); // ✅ Redirect only when charging is active\n//       }\n//     };\n//     const interval = setInterval(checkTime, 1000);\n//     checkTime(); // Run immediately\n//     return () => clearInterval(interval);\n//   }, [endTime, isChargingInitialized, router]);\n//   return {\n//     endTime,\n//     setTimer,\n//   };\n// }\n//pause and resumne\n// \"use client\";\n// import { useState, useEffect } from \"react\";\n// import { useRouter } from \"next/navigation\";\n// import { useChargingStatus } from \"./useChargingStatus\";\n// import { useBMSData } from \"./useBMSData\"; // ✅ Import BMS data hook\n// export function useTimerStatus() {\n//   const [endTime, setEndTime] = useState<number | null>(null);\n//   const [remainingTime, setRemainingTime] = useState<number | null>(null);\n//   const [isPaused, setIsPaused] = useState(false); // ✅ Track pause state\n//   const router = useRouter();\n//   const { isChargingInitialized } = useChargingStatus();\n//   const { bmsData } = useBMSData(); // ✅ Get FOD & misalignment status\n//   // Function to set the timer\n//   const setTimer = (durationMinutes: number) => {\n//     const currentTime = Date.now();\n//     const calculatedEndTime = currentTime + durationMinutes * 60 * 1000;\n//     setEndTime(calculatedEndTime);\n//     setRemainingTime(durationMinutes * 60 * 1000);\n//     localStorage.setItem(\"chargingEndTime\", calculatedEndTime.toString());\n//   };\n//   // Retrieve stored endTime on component mount\n//   useEffect(() => {\n//     const storedEndTime = localStorage.getItem(\"chargingEndTime\");\n//     if (storedEndTime) {\n//       setEndTime(Number(storedEndTime));\n//     }\n//   }, []);\n//   // ✅ Handle pause and resume logic\n//   useEffect(() => {\n//     if (bmsData?.isFOD || bmsData?.isMiss ) {\n//       if (!isPaused) {\n//         setIsPaused(true);\n//         setRemainingTime((prev) => (endTime ? endTime - Date.now() : prev)); // Store remaining time\n//         setEndTime(null); // Pause the countdown\n//       }\n//     } else {\n//       if (isPaused) {\n//         setIsPaused(false);\n//         if (remainingTime !== null) {\n//           const newEndTime = Date.now() + remainingTime;\n//           setEndTime(newEndTime);\n//           localStorage.setItem(\"chargingEndTime\", newEndTime.toString());\n//         }\n//       }\n//     }\n//   }, [bmsData?.isFOD, bmsData?.isMiss]);\n//   // ✅ Timer countdown logic\n//   useEffect(() => {\n//     if (!endTime || !isChargingInitialized || isPaused) return;\n//     const checkTime = () => {\n//       const now = Date.now();\n//       if (now >= endTime && isChargingInitialized) {\n//         console.log(\"⏰ Timer expired! Redirecting to /done...\");\n//         router.replace(\"/done\");\n//       }\n//     };\n//     const interval = setInterval(checkTime, 1000);\n//     checkTime();\n//     return () => clearInterval(interval);\n//   }, [endTime, isChargingInitialized, isPaused, router]);\n//   return {\n//     endTime,\n//     setTimer,\n//     isPaused,\n//   };\n// }\n//counter\n// \"use client\";\n// import { useState, useEffect } from \"react\";\n// import { useRouter } from \"next/navigation\";\n// import { useChargingStatus } from \"./useChargingStatus\";\n// import { useBMSData } from \"./useBMSData\"; // ✅ Import BMS data hook\n// export function useTimerStatus() {\n//   const [endTime, setEndTime] = useState<number | null>(null);\n//   const [remainingTime, setRemainingTime] = useState<number | null>(null);\n//   const [isPaused, setIsPaused] = useState(true);\n//   const router = useRouter();\n//   const { updateChargingStatus, isChargingInitialized } = useChargingStatus(); // ✅ Update charging state\n//   const { bmsData } = useBMSData(); // ✅ Get FOD & misalignment status\n//   // Function to set the timer\n//   const setTimer = (durationMinutes: number) => {\n//     const currentTime = Date.now();\n//     const calculatedEndTime = currentTime + durationMinutes * 60 * 1000;\n//     setEndTime(calculatedEndTime);\n//     setRemainingTime(durationMinutes * 60 * 1000);\n//     localStorage.setItem(\"chargingEndTime\", calculatedEndTime.toString());\n//     updateChargingStatus(true); // ✅ Start charging when timer starts\n//   };\n//   // Retrieve stored endTime on component mount\n//   useEffect(() => {\n//     const storedEndTime = localStorage.getItem(\"chargingEndTime\");\n//     if (storedEndTime) {\n//       setEndTime(Number(storedEndTime));\n//     }\n//   }, []);\n//   // ✅ Handle pause and resume logic\n//   useEffect(() => {\n//     const shouldPause = bmsData?.isFOD || bmsData?.isMiss || !bmsData?.isReceiverCoilDetected;\n//     if (shouldPause && !isPaused) {\n//       // Pause the timer\n//       setIsPaused(true);\n//       setRemainingTime(endTime ? Math.max(endTime - Date.now(), 0) : remainingTime);\n//       setEndTime(null); // Stop the countdown\n//       updateChargingStatus(false); // ✅ Stop charging when paused\n//     } else if (!shouldPause && isPaused && remainingTime !== null) {\n//       // Resume the timer\n//       setIsPaused(false);\n//       const newEndTime = Date.now() + remainingTime;\n//       setEndTime(newEndTime);\n//       localStorage.setItem(\"chargingEndTime\", newEndTime.toString());\n//       updateChargingStatus(true); // ✅ Resume charging\n//     }\n//   }, [bmsData?.isFOD, bmsData?.isMiss, bmsData?.isReceiverCoilDetected]);\n//   // ✅ Timer countdown logic\n//   useEffect(() => {\n//     if (!endTime || !isChargingInitialized || isPaused) return;\n//     const checkTime = () => {\n//       const now = Date.now();\n//       if (now >= endTime && isChargingInitialized) {\n//         console.log(\"⏰ Timer expired! Redirecting to /done...\");\n//         router.replace(\"/done\");\n//       }\n//     };\n//     const interval = setInterval(checkTime, 1000);\n//     checkTime();\n//     return () => clearInterval(interval);\n//   }, [endTime, isChargingInitialized, isPaused, router]);\n//   return {\n//     endTime,\n//     setTimer,\n//     isPaused,\n//   };\n// }\n//after app building\n// \"use client\";\n// import { useState, useEffect } from \"react\";\n// import { useRouter } from \"next/navigation\";\n// import { useChargingStatus } from \"./useChargingStatus\";\n// import { useBMSData } from \"./useBMSData\";\n// export function useTimerStatus() {\n//   const [endTime, setEndTime] = useState<number | null>(null);\n//   const [remainingTime, setRemainingTime] = useState<number | null>(null);\n//   const [isPaused, setIsPaused] = useState(true);\n//   const router = useRouter();\n//   const { updateChargingStatus, isChargingInitialized } = useChargingStatus();\n//   const { bmsData } = useBMSData();\n//   // Set a timer with duration in minutes\n//   const setTimer = (durationMinutes: number) => {\n//     const currentTime = Date.now();\n//     const calculatedEndTime = currentTime + durationMinutes * 60 * 1000;\n//     setEndTime(calculatedEndTime);\n//     setRemainingTime(durationMinutes * 60 * 1000);\n//     localStorage.setItem(\"chargingEndTime\", calculatedEndTime.toString());\n//     updateChargingStatus(true); // Start charging\n//     setIsPaused(false);\n//   };\n//   // Load endTime from localStorage when hook mounts\n//   useEffect(() => {\n//     const storedEndTime = localStorage.getItem(\"chargingEndTime\");\n//     if (storedEndTime) {\n//       const parsedEndTime = Number(storedEndTime);\n//       const currentTime = Date.now();\n//       const timeLeft = parsedEndTime - currentTime;\n//       if (timeLeft > 0) {\n//         setEndTime(parsedEndTime);\n//         setRemainingTime(timeLeft);\n//         setIsPaused(false);\n//       } else {\n//         localStorage.removeItem(\"chargingEndTime\");\n//         router.replace(\"/done\");\n//       }\n//     }\n//   }, [router]);\n//   // Pause/resume based on FOD, misalignment, or receiver coil detection\n//   // useEffect(() => {\n//   //   const shouldPause =\n//   //     bmsData?.isFOD || bmsData?.isMiss || !bmsData?.isReceiverCoilDetected;\n//   //   if (shouldPause && !isPaused) {\n//   //     // Pause\n//   //     const now = Date.now();\n//   //     setIsPaused(true);\n//   //     if (endTime) {\n//   //       const timeLeft = Math.max(endTime - now, 0);\n//   //       setRemainingTime(timeLeft);\n//   //       setEndTime(null);\n//   //     }\n//   //     updateChargingStatus(false);\n//   //   } else if (!shouldPause && isPaused && remainingTime !== null) {\n//   //     // Resume\n//   //     if (remainingTime <= 0) {\n//   //       localStorage.removeItem(\"chargingEndTime\");\n//   //       router.replace(\"/done\");\n//   //       return;\n//   //     }\n//   //     const newEndTime = Date.now() + remainingTime;\n//   //     setEndTime(newEndTime);\n//   //     localStorage.setItem(\"chargingEndTime\", newEndTime.toString());\n//   //     setIsPaused(false);\n//   //     updateChargingStatus(true);\n//   //   }\n//   // }, [\n//   //   bmsData?.isFOD,\n//   //   bmsData?.isMiss,\n//   //   bmsData?.isReceiverCoilDetected,\n//   //   isPaused,\n//   //   endTime,\n//   //   remainingTime,\n//   //   router,\n//   //   updateChargingStatus,\n//   // ]);\n// useEffect(() => {\n//   const shouldPause =\n//     bmsData?.isFOD || bmsData?.isMiss || !bmsData?.isReceiverCoilDetected;\n//   const now = Date.now();\n//   if (shouldPause && !isPaused) {\n//     // 🔴 Pause logic\n//     setIsPaused(true);\n//     if (endTime) {\n//       const timeLeft = Math.max(endTime - now, 0);\n//       setRemainingTime(timeLeft);\n//       setEndTime(null);\n//     }\n//     updateChargingStatus(false); // Optional: await if you want to guarantee state sync\n//   }\n//   else if (!shouldPause && isPaused) {\n//     // 🟢 Resume logic\n//     const safeRemaining = remainingTime ?? (endTime ? Math.max(endTime - now, 0) : 0);\n//     if (safeRemaining <= 0) {\n//       localStorage.removeItem(\"chargingEndTime\");\n//       updateChargingStatus(false).then(() => {\n//         // router.replace(\"/done\");\n//       });\n//       return;\n//     }\n//     const newEndTime = now + safeRemaining;\n//     setEndTime(newEndTime);\n//     localStorage.setItem(\"chargingEndTime\", newEndTime.toString());\n//     setRemainingTime(null); // Clear after using\n//     setIsPaused(false);\n//     updateChargingStatus(true);\n//   }\n// }, [\n//   bmsData?.isFOD,\n//   bmsData?.isMiss,\n//   bmsData?.isReceiverCoilDetected,\n//   isPaused,\n//   endTime,\n//   remainingTime,\n//   router,\n//   updateChargingStatus,\n// ]);\n//   // Countdown timer - redirect when complete\n//   useEffect(() => {\n//     if (!endTime || !isChargingInitialized || isPaused) return;\n//     const interval = setInterval(() => {\n//       const now = Date.now();\n//       if (now >= endTime) {\n//         localStorage.removeItem(\"chargingEndTime\");\n//         // router.replace(\"/done\");\n//       }\n//     }, 1000);\n//     return () => clearInterval(interval);\n//   }, [endTime, isChargingInitialized, isPaused, router]);\n//   return {\n//     endTime,\n//     setTimer,\n//     isPaused,\n//   };\n// }\n///inal fix\n/* __next_internal_client_entry_do_not_use__ useTimerStatus auto */ \n\n\n // ✅ Import BMS data hook\nfunction useTimerStatus() {\n    const [endTime, setEndTime] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [remainingTime, setRemainingTime] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [isPaused, setIsPaused] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(true);\n    const router = (0,next_navigation__WEBPACK_IMPORTED_MODULE_1__.useRouter)();\n    const { updateChargingStatus, isChargingInitialized } = (0,_useChargingStatus__WEBPACK_IMPORTED_MODULE_2__.useChargingStatus)(); // ✅ Update charging state\n    const { bmsData } = (0,_useBMSData__WEBPACK_IMPORTED_MODULE_3__.useBMSData)(); // ✅ Get FOD & misalignment status\n    // Function to set the timer\n    const setTimer = (durationMinutes)=>{\n        const currentTime = Date.now();\n        const calculatedEndTime = currentTime + durationMinutes * 60 * 1000;\n        setEndTime(calculatedEndTime);\n        setRemainingTime(durationMinutes * 60 * 1000);\n        localStorage.setItem(\"chargingEndTime\", calculatedEndTime.toString());\n        updateChargingStatus(true); // ✅ Start charging when timer starts\n    };\n    // Retrieve stored endTime on component mount\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"useTimerStatus.useEffect\": ()=>{\n            const storedEndTime = localStorage.getItem(\"chargingEndTime\");\n            if (storedEndTime) {\n                setEndTime(Number(storedEndTime));\n            }\n        }\n    }[\"useTimerStatus.useEffect\"], []);\n    // ✅ Handle pause and resume logic\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"useTimerStatus.useEffect\": ()=>{\n            const isFOD = !!(bmsData === null || bmsData === void 0 ? void 0 : bmsData.isFOD);\n            const isMiss = !!(bmsData === null || bmsData === void 0 ? void 0 : bmsData.isMiss);\n            const isReceiverDetected = !!(bmsData === null || bmsData === void 0 ? void 0 : bmsData.isReceiverCoilDetected);\n            const shouldPause = isFOD || isMiss || !isReceiverDetected;\n            const now = Date.now();\n            if (shouldPause && !isPaused) {\n                console.log(\"⏸ Pausing timer\");\n                setIsPaused(true);\n                if (endTime) {\n                    const timeLeft = Math.max(endTime - now, 0);\n                    setRemainingTime(timeLeft);\n                    setEndTime(null); // This triggers cleanup of the timer effect\n                }\n                updateChargingStatus(false);\n            }\n            if (!shouldPause && isPaused && remainingTime) {\n                console.log(\"▶️ Resuming timer\");\n                const newEndTime = now + remainingTime;\n                setEndTime(newEndTime);\n                setRemainingTime(null);\n                setIsPaused(false);\n                updateChargingStatus(true);\n                localStorage.setItem(\"chargingEndTime\", newEndTime.toString());\n            }\n        }\n    }[\"useTimerStatus.useEffect\"], [\n        bmsData === null || bmsData === void 0 ? void 0 : bmsData.isFOD,\n        bmsData === null || bmsData === void 0 ? void 0 : bmsData.isMiss,\n        bmsData === null || bmsData === void 0 ? void 0 : bmsData.isReceiverCoilDetected,\n        isPaused,\n        endTime,\n        remainingTime\n    ]);\n    // ✅ Timer countdown logic\n    const intervalRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"useTimerStatus.useEffect\": ()=>{\n            if (!endTime || isPaused || !isChargingInitialized) {\n                console.log(\"⏸ Timer not active:\", {\n                    endTime,\n                    isPaused,\n                    isChargingInitialized\n                });\n                if (intervalRef.current) {\n                    clearInterval(intervalRef.current);\n                    intervalRef.current = null;\n                    console.log(\"🧹 Interval cleared due to pause or missing state.\");\n                }\n                return;\n            }\n            console.log(\"🕒 Starting interval. End time:\", new Date(endTime).toLocaleTimeString());\n            const checkTime = {\n                \"useTimerStatus.useEffect.checkTime\": ()=>{\n                    const now = Date.now();\n                    if (now >= endTime) {\n                        console.log(\"⏰ Timer expired! Redirecting...\");\n                        updateChargingStatus(false).then({\n                            \"useTimerStatus.useEffect.checkTime\": ()=>{\n                                router.replace(\"/done\");\n                            }\n                        }[\"useTimerStatus.useEffect.checkTime\"]);\n                        clearInterval(intervalRef.current);\n                        intervalRef.current = null;\n                    }\n                }\n            }[\"useTimerStatus.useEffect.checkTime\"];\n            intervalRef.current = setInterval(checkTime, 1000);\n            checkTime(); // run once immediately\n            return ({\n                \"useTimerStatus.useEffect\": ()=>{\n                    if (intervalRef.current) {\n                        clearInterval(intervalRef.current);\n                        intervalRef.current = null;\n                        console.log(\"🧹 Cleaning up timer on unmount or re-run\");\n                    }\n                }\n            })[\"useTimerStatus.useEffect\"];\n        }\n    }[\"useTimerStatus.useEffect\"], [\n        endTime,\n        isPaused,\n        isChargingInitialized\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"useTimerStatus.useEffect\": ()=>{\n            console.log(\"DEBUG -> endTime:\", endTime);\n            console.log(\"DEBUG -> isChargingInitialized:\", isChargingInitialized);\n            console.log(\"DEBUG -> isPaused:\", isPaused);\n        }\n    }[\"useTimerStatus.useEffect\"], [\n        endTime,\n        isChargingInitialized,\n        isPaused\n    ]);\n    return {\n        endTime,\n        setTimer,\n        isPaused\n    };\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./hooks/useTimerStatus.ts\n"));

/***/ })

});